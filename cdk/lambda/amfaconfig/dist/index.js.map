{
  "version": 3,
  "sources": ["../index.mjs"],
  "sourcesContent": ["import {\n\tDynamoDBClient,\n\tGetItemCommand,\n} from '@aws-sdk/client-dynamodb';\n\nimport { CognitoIdentityProviderClient, DescribeUserPoolCommand } from \"@aws-sdk/client-cognito-identity-provider\";\n\nconst dynamodb = new DynamoDBClient({ region: process.env.AWS_REGION });\nconst cognito = new CognitoIdentityProviderClient({ region: process.env.AWS_REGION });\n\nconst headers = {\n\t'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Api-Key,X-Requested-With',\n\t'Access-Control-Allow-Origin': '*',\n\t'Access-Control-Allow-Methods': 'OPTIONS,GET',\n};\n\nconst response = (statusCode = 200, body) => {\n\tconsole.log('return with:', {\n\t\tstatusCode,\n\t\theaders,\n\t\tbody,\n\t});\n\treturn {\n\t\tstatusCode,\n\t\theaders,\n\t\tbody,\n\t};\n};\n\n\nconst configs = ['amfaConfigs', 'amfaPolicies'];\n\nexport const handler = async (event) => {\n\n\tconsole.info(\"EVENT\\n\" + JSON.stringify(event, null, 2))\n\n\tlet promises = [];\n\n\tconfigs.forEach(configType => {\n\t\tconst params = {\n\t\t\tTableName: process.env.AMFACONFIG_TABLE,\n\t\t\tKey: {\n\t\t\t\tconfigtype: { S: configType },\n\t\t\t},\n\t\t};\n\t\tpromises.push(dynamodb.send(new GetItemCommand(params)));\n\t});\n\n\tconst params = {\n\t\tTableName: process.env.AMFATENANT_TABLE,\n\t\tKey: {\n\t\t\tid: { S: process.env.TENANT_ID },\n\t\t},\n\t};\n\n\tpromises.push(dynamodb.send(new GetItemCommand(params)));\n\n\tpromises.push(cognito.send(new DescribeUserPoolCommand({\n\t\tUserPoolId: process.env.USERPOOL_ID,\n\t})));\n\n\tconst [configRes, policyRes, samlRes, cognitoRes] = await Promise.allSettled(promises);\n\n\tconsole.log('samlres', samlRes);\n\tconsole.log('cognitores', cognitoRes);\n\n\tif (configRes.status === 'rejected' || policyRes.status === 'rejected' || samlRes.status === 'rejected' || cognitoRes.status === 'rejected') {\n\t\tconsole.log('configres', configRes);\n\t\tconsole.log('policyres', policyRes);\n\t\tconsole.log('samlres', samlRes);\n\t\tconsole.log('cognitores', cognitoRes);\n\t\treturn response(500, JSON.stringify({ error: 'Internal server error' }));\n\t}\n\n\treturn response(200, JSON.stringify({\n\t\tamfaConfigs: JSON.parse(configRes.value.Item.value.S),\n\t\tamfaPolicies: JSON.parse(policyRes.value.Item.value.S),\n\t\tsamlProxyEnabled: samlRes.value.Item?.samlproxy?.BOOL,\n\t\ttotalUserNumber: cognitoRes.value.UserPool.EstimatedNumberOfUsers,\n\t}));\n\n}"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAGO,oCAEPC,EAAuE,qDAEjEC,EAAW,IAAI,iBAAe,CAAE,OAAQ,QAAQ,IAAI,UAAW,CAAC,EAChEC,EAAU,IAAI,gCAA8B,CAAE,OAAQ,QAAQ,IAAI,UAAW,CAAC,EAE9EC,EAAU,CACf,+BAAgC,wDAChC,8BAA+B,IAC/B,+BAAgC,aACjC,EAEMC,EAAW,CAACC,EAAa,IAAKC,KACnC,QAAQ,IAAI,eAAgB,CAC3B,WAAAD,EACA,QAAAF,EACA,KAAAG,CACD,CAAC,EACM,CACN,WAAAD,EACA,QAAAF,EACA,KAAAG,CACD,GAIKC,EAAU,CAAC,cAAe,cAAc,EAEjCV,EAAU,MAAOW,GAAU,CAEvC,QAAQ,KAAK;AAAA,EAAY,KAAK,UAAUA,EAAO,KAAM,CAAC,CAAC,EAEvD,IAAIC,EAAW,CAAC,EAEhBF,EAAQ,QAAQG,GAAc,CAC7B,IAAMC,EAAS,CACd,UAAW,QAAQ,IAAI,iBACvB,IAAK,CACJ,WAAY,CAAE,EAAGD,CAAW,CAC7B,CACD,EACAD,EAAS,KAAKR,EAAS,KAAK,IAAI,iBAAeU,CAAM,CAAC,CAAC,CACxD,CAAC,EAED,IAAMA,EAAS,CACd,UAAW,QAAQ,IAAI,iBACvB,IAAK,CACJ,GAAI,CAAE,EAAG,QAAQ,IAAI,SAAU,CAChC,CACD,EAEAF,EAAS,KAAKR,EAAS,KAAK,IAAI,iBAAeU,CAAM,CAAC,CAAC,EAEvDF,EAAS,KAAKP,EAAQ,KAAK,IAAI,0BAAwB,CACtD,WAAY,QAAQ,IAAI,WACzB,CAAC,CAAC,CAAC,EAEH,GAAM,CAACU,EAAWC,EAAWC,EAASC,CAAU,EAAI,MAAM,QAAQ,WAAWN,CAAQ,EAKrF,OAHA,QAAQ,IAAI,UAAWK,CAAO,EAC9B,QAAQ,IAAI,aAAcC,CAAU,EAEhCH,EAAU,SAAW,YAAcC,EAAU,SAAW,YAAcC,EAAQ,SAAW,YAAcC,EAAW,SAAW,YAChI,QAAQ,IAAI,YAAaH,CAAS,EAClC,QAAQ,IAAI,YAAaC,CAAS,EAClC,QAAQ,IAAI,UAAWC,CAAO,EAC9B,QAAQ,IAAI,aAAcC,CAAU,EAC7BX,EAAS,IAAK,KAAK,UAAU,CAAE,MAAO,uBAAwB,CAAC,CAAC,GAGjEA,EAAS,IAAK,KAAK,UAAU,CACnC,YAAa,KAAK,MAAMQ,EAAU,MAAM,KAAK,MAAM,CAAC,EACpD,aAAc,KAAK,MAAMC,EAAU,MAAM,KAAK,MAAM,CAAC,EACrD,iBAAkBC,EAAQ,MAAM,MAAM,WAAW,KACjD,gBAAiBC,EAAW,MAAM,SAAS,sBAC5C,CAAC,CAAC,CAEH",
  "names": ["amfaconfig_exports", "__export", "handler", "__toCommonJS", "import_client_dynamodb", "import_client_cognito_identity_provider", "dynamodb", "cognito", "headers", "response", "statusCode", "body", "configs", "event", "promises", "configType", "params", "configRes", "policyRes", "samlRes", "cognitoRes"]
}
