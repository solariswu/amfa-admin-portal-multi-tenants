{
  "version": 3,
  "sources": ["../index.mjs"],
  "sourcesContent": ["//AWS configurations\nimport {\n    ListUserPoolClientsCommand,\n    CognitoIdentityProviderClient,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport { DynamoDBClient, GetItemCommand } from '@aws-sdk/client-dynamodb';\n\nconst dynamodbISP = new DynamoDBClient({ region: process.env.AWS_REGION });\nconst cognitoISP = new CognitoIdentityProviderClient({ region: process.env.AWS_REGION });\n\nconst samlurl = process.env.SAMLPROXY_API_URL;\nconst Limit = 60;\n\nconst getSAMLSpInfo = async (dynamodb, cognitoToken) => {\n    let data = []\n\n    try {\n        const res = await fetch(samlurl, {\n            method: \"GET\",\n            cache: \"no-cache\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": cognitoToken,\n            }\n        });\n        console.log('fetch samlurl res', res)\n\n        const resData = await res.json();\n        console.log('fetch samlurl resData', resData)\n\n        for (var item in resData) {\n\n            console.log('samlslist getting item with id from ddb', resData[item].id)\n\n            const params = {\n                TableName: process.env.AMFA_SPINFO_TABLE,\n                Key: {\n                    id: { S: `#SAML#${resData[item].id}` },\n                },\n            };\n\n            let spInfo = null;\n\n            try {\n                const spInfoRes = await dynamodb.send(new GetItemCommand(params));\n\n                console.log('samlslist get spInfo from dynamodb Res', spInfoRes)\n\n                if (spInfoRes?.Item?.id) {\n                    spInfo = {\n                        logoUrl: spInfoRes?.Item?.logoUrl?.S,\n                        serviceUrl: spInfoRes?.Item?.serviceUrl?.S,\n                        released: spInfoRes?.Item?.released?.BOOL ? true : false,\n                    }\n                }\n            }\n            catch (e) {\n                console.log('samlslist get spInfo from dynamodb error', e)\n            }\n\n            data.push({\n                id: resData[item].id,\n                name: resData[item].name,\n                entityId: resData[item].entityId,\n                logoUrl: spInfo?.logoUrl,\n                serviceUrl: spInfo?.serviceUrl,\n                released: spInfo?.released,\n            })\n        }\n    } catch (error) {\n        console.error ('samlslist fetch samlurl error', error)\n    }\n\n    return data;\n}\n\nconst getSPInfo = async (dynamodb, clientId) => {\n\n    const params = {\n        TableName: process.env.AMFA_SPINFO_TABLE,\n        Key: {\n            id: { S: `#OIDC#${clientId}` },\n        },\n    };\n\n    let spInfo = null;\n    let spArray = [];\n\n    try {\n        const spInfoRes = await dynamodb.send(new GetItemCommand(params));\n\n        console.log('get spInfo from dynamodb Res', spInfoRes)\n\n        if (spInfoRes?.Item?.id) {\n            spInfo = {\n                logoUrl: spInfoRes?.Item?.logoUrl?.S,\n                serviceUrl: spInfoRes?.Item?.serviceUrl?.S,\n                released: spInfoRes?.Item?.released?.BOOL,\n            }\n        }\n    }\n    catch (e) {\n        console.log('appclient get spInfo from dynamodb error', e)\n    }\n\n    if (spInfo?.serviceUrl) {\n        try {\n            spArray = JSON.parse(spInfo.serviceUrl)\n        }\n        catch (e) {\n            console.log('appclient oidc spInfo serviceUrl json parse error', e)\n        }\n        delete spInfo.serviceUrl;\n        spInfo.serviceProviders = spArray.filter(el => el.released);\n    }\n\n    return spInfo;\n}\n\nexport const handler = async (event) => {\n\n    console.info(\"EVENT\\n\" + JSON.stringify(event, null, 2))\n\n    let errMsg = { type: 'exception', message: 'Service Error' };\n    const cognitoToken = event.headers.authorization;\n\n    try {\n\n        const params = {\n            Limit,\n            ...(event.body && { NextToken: event.body }), // tokens[1] contain the token query for page 1.\n            UserPoolId: process.env.USERPOOL_ID,\n        }\n\n        console.info('params', params);\n\n        let data = await cognitoISP.send(new ListUserPoolClientsCommand(params));\n\n        let resData = [];\n        if (data?.UserPoolClients && data.UserPoolClients.length > 0) {\n            const res = data.UserPoolClients.filter(\n                appclient =>\n                    appclient.ClientName !== 'hostedUIClient' &&\n                    appclient.ClientName !== 'customAuthClient' &&\n                    appclient.ClientName !== 'samlproxyClient' &&\n                    !appclient.ClientName.startsWith('amfasys_'));\n            for (const item of res) {\n                const spInfo = await getSPInfo(dynamodbISP, item.ClientId);\n                if (spInfo && spInfo.serviceProviders.length > 0) {\n                    resData.push({\n                        id: item.ClientId,\n                        name: item.ClientName,\n                        logoUrl: spInfo.logoUrl,\n                        serviceProviders: spInfo.serviceProviders,\n                        type: 'oidc',\n                    });\n                }\n            }\n        }\n\n        const samlsps = await getSAMLSpInfo(dynamodbISP, cognitoToken);\n\n        samlsps.forEach(samlsp => {\n            // hide non-released sp from end user\n            if (samlsp.released) {\n                resData.push({\n                    id: samlsp.id,\n                    name: samlsp.name,\n                    logoUrl: samlsp.logoUrl,\n                    serviceUrl: samlsp.serviceUrl,\n                    released: samlsp.released,\n                    type: 'saml',\n                })\n            }\n        })\n\n        // deco the list by replacing root item with children when there is only one child item.\n        const finalData = resData.map(el => {\n            if (el.serviceProviders?.length === 1) {\n                el.id = el.id + '#' + el.serviceProviders[0].spname.replace(/\\s/g, '');\n                el.name = el.serviceProviders[0].spname;\n                el.released = el.serviceProviders[0].released;\n                el.logoUrl = el.serviceProviders[0].splogourl?.length ? el.serviceProviders[0].splogourl : el.logoUrl;\n                el.serviceUrl = el.serviceProviders[0].sploginurl;\n                delete el.serviceProviders;\n            }\n            return el;\n        })\n\n        // getList of React-admin expects response to have header called 'Content-Range'.\n        // when we add new header in response, we have to acknowledge it, so 'Access-Control-Expose-Headers'\n        const page = parseInt(event.queryStringParameters.page);\n        const perPage = parseInt(event.queryStringParameters.perPage);\n        const start = (page - 1) * perPage;\n        const end = finalData.length + start - 1;\n\n        return {\n            statusCode: 200,\n            headers: {\n                'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Api-Key,Content-Range,X-Requested-With',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'OPTIONS,GET,POST',\n                'Access-Control-Expose-Headers': 'Content-Range',\n                'Content-Range': `serviceproviders ${start}-${end}`,\n            },\n            body: JSON.stringify({\n                data: finalData,\n                total: finalData.length,\n            }),\n        }\n\n    } catch (e) {\n        console.log('Catch an error: ', e)\n        switch (e.name) {\n            case 'ThrottlingException':\n                errMsg = { type: 'exception', message: 'Too many requests' };\n                break;\n            case 'InvalidParameterValue':\n            case 'InvalidParameterException':\n                errMsg = { type: 'exception', message: 'Invalid parameter' };\n                break;\n            default:\n                errMsg = { type: 'exception', message: 'Service Error' };\n                break;\n        }\n    }\n    // TODO implement\n    const response = {\n        statusCode: 500,\n        body: JSON.stringify(errMsg),\n    };\n    return response;\n};\n"],
  "mappings": "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",
  "names": ["serviceproviderslist_exports", "__export", "handler", "__toCommonJS", "import_client_cognito_identity_provider", "import_client_dynamodb", "dynamodbISP", "cognitoISP", "samlurl", "Limit", "getSAMLSpInfo", "dynamodb", "cognitoToken", "data", "res", "resData", "item", "params", "spInfo", "spInfoRes", "e", "error", "getSPInfo", "clientId", "spArray", "el", "event", "errMsg", "appclient", "samlsp", "finalData", "page", "perPage", "start", "end"]
}
