{
  "version": 3,
  "sources": ["../index.mjs"],
  "sourcesContent": ["import { S3Client, GetObjectCommand } from '@aws-sdk/client-s3'\n\nconst s3ISP = new S3Client({ region: process.env.AWS_REGION });\n\nconst types = ['spportal', 'adminportal']\n\nexport const handler = async (event) => {\n\n    console.info(\"EVENT\\n\" + JSON.stringify(event, null, 2))\n\n    let errMsg = { type: 'exception', message: 'Service Error' };\n\n    const startIdx = 0;\n\n    const getResData = async (type, s3) => {\n        const params = {\n            Bucket: type === 'spportal' ? process.env.SPPORTAL_BUCKETNAME : process.env.ADMINPORTAL_BUCKETNAME,\n            Key: 'branding.json',\n        };\n        const data = await s3.send(new GetObjectCommand(params));\n        const body = await data.Body.transformToString();\n\n        return JSON.parse(body);\n    }\n\n    let promises = []\n    types.map ((type) => promises.push(getResData(type)))\n\n    const [spInfo, adminInfo] = await Promise.allSettled (promises);\n\n    if (spInfo.status === 'rejected' && adminInfo === 'rejected') {\n        return response(404, JSON.stringify({ data: 'Not Found' }));\n    }\n\n    let resData = []\n\n    if (spInfo.value) {\n        resData.push({id: 'spportal', ...spInfo.value})\n    }\n\n    if (adminInfo.value) {\n        resData.push({id: 'adminportal', ...adminInfo.value})\n    }\n\n    resData.sort((a, b) => {\n        if (a.id < b.id) return -1;\n        if (a.id > b.id) return 1;\n        return 0;\n    });\n\n    return {\n        statusCode: 200,\n        headers: {\n            'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Api-Key,Content-Range,X-Requested-With',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'OPTIONS,GET,POST',\n            'Access-Control-Expose-Headers': 'Content-Range',\n            'Content-Range': `brandings ${startIdx + 1}-${startIdx + 1 + resData.length}`,\n        },\n        body: JSON.stringify({\n            data: resData,\n            total: resData.length,\n        }),\n    }\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA2C,8BAErCC,EAAQ,IAAI,WAAS,CAAE,OAAQ,QAAQ,IAAI,UAAW,CAAC,EAEvDC,EAAQ,CAAC,WAAY,aAAa,EAE3BJ,EAAU,MAAOK,GAAU,CAEpC,QAAQ,KAAK;AAAA,EAAY,KAAK,UAAUA,EAAO,KAAM,CAAC,CAAC,EAEvD,IAAIC,EAAS,CAAE,KAAM,YAAa,QAAS,eAAgB,EAErDC,EAAW,EAEXC,EAAa,MAAOC,EAAMC,IAAO,CACnC,IAAMC,EAAS,CACX,OAAQF,IAAS,WAAa,QAAQ,IAAI,oBAAsB,QAAQ,IAAI,uBAC5E,IAAK,eACT,EAEMG,EAAO,MADA,MAAMF,EAAG,KAAK,IAAI,mBAAiBC,CAAM,CAAC,GAC/B,KAAK,kBAAkB,EAE/C,OAAO,KAAK,MAAMC,CAAI,CAC1B,EAEIC,EAAW,CAAC,EAChBT,EAAM,IAAMK,GAASI,EAAS,KAAKL,EAAWC,CAAI,CAAC,CAAC,EAEpD,GAAM,CAACK,EAAQC,CAAS,EAAI,MAAM,QAAQ,WAAYF,CAAQ,EAE9D,GAAIC,EAAO,SAAW,YAAcC,IAAc,WAC9C,OAAO,SAAS,IAAK,KAAK,UAAU,CAAE,KAAM,WAAY,CAAC,CAAC,EAG9D,IAAIC,EAAU,CAAC,EAEf,OAAIF,EAAO,OACPE,EAAQ,KAAK,CAAC,GAAI,WAAY,GAAGF,EAAO,KAAK,CAAC,EAG9CC,EAAU,OACVC,EAAQ,KAAK,CAAC,GAAI,cAAe,GAAGD,EAAU,KAAK,CAAC,EAGxDC,EAAQ,KAAK,CAACC,EAAGC,IACTD,EAAE,GAAKC,EAAE,GAAW,GACpBD,EAAE,GAAKC,EAAE,GAAW,EACjB,CACV,EAEM,CACH,WAAY,IACZ,QAAS,CACL,+BAAgC,sEAChC,8BAA+B,IAC/B,+BAAgC,mBAChC,gCAAiC,gBACjC,gBAAiB,aAAaX,EAAW,CAAC,IAAIA,EAAW,EAAIS,EAAQ,MAAM,EAC/E,EACA,KAAM,KAAK,UAAU,CACjB,KAAMA,EACN,MAAOA,EAAQ,MACnB,CAAC,CACL,CACJ",
  "names": ["index_exports", "__export", "handler", "__toCommonJS", "import_client_s3", "s3ISP", "types", "event", "errMsg", "startIdx", "getResData", "type", "s3", "params", "body", "promises", "spInfo", "adminInfo", "resData", "a", "b"]
}
