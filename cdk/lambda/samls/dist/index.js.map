{
  "version": 3,
  "sources": ["../index.mjs", "../put.mjs", "../delete.mjs", "../get.mjs"],
  "sourcesContent": ["import { putResData } from './put.mjs';\nimport { deleteResData } from './delete.mjs';\nimport { getResData } from './get.mjs';\n\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\n\nconst dynamodb = new DynamoDBClient({ region: process.env.AWS_REGION });\n\nconst samlurl = process.env.SAMLPROXY_API_URL;\nconst samlReloadUrl = process.env.SAMLPROXY_RELOAD_URL;\n\nexport const handler = async (event) => {\n\n\tconsole.info(\"EVENT\\n\" + JSON.stringify(event, null, 2))\n\tconsole.log('event.requestContext.http.method: ', event.requestContext.http.method);\n\n\tconst headers = {\n\t\t'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Api-Key,X-Requested-With',\n\t\t'Access-Control-Allow-Origin': '*',\n\t\t'Access-Control-Allow-Methods': 'OPTIONS,GET,PUT,DELETE',\n\t};\n\n\tconst response = (statusCode = 200, body) => {\n\t\tconsole.log('return with:', {\n\t\t\tstatusCode,\n\t\t\theaders,\n\t\t\tbody,\n\t\t});\n\t\treturn {\n\t\t\tstatusCode,\n\t\t\theaders,\n\t\t\tbody,\n\t\t};\n\t};\n\n\tconst cognitoToken = event.headers.authorization;\n\n\ttry {\n\t\tswitch (event.requestContext.http.method) {\n\t\t\tcase 'GET':\n\t\t\t\tconst getResult = await getResData(event.pathParameters?.id, samlurl, dynamodb, cognitoToken);\n\t\t\t\treturn response(200, JSON.stringify({ data: getResult }));\n\t\t\tcase 'PUT':\n\t\t\t\tconst payload = JSON.parse(event.body);\n\t\t\t\tconst putResult = await putResData(payload.data, dynamodb);\n\t\t\t\treturn response(200, JSON.stringify({ data: putResult }));\n\t\t\tcase 'DELETE':\n\t\t\t\tconst deleteResult = await deleteResData(event.pathParameters?.id, samlurl, cognitoToken, samlReloadUrl, dynamodb);\n\t\t\t\treturn response(200, JSON.stringify({ data: deleteResult }));\n\t\t\tcase 'OPTIONS':\n\t\t\t\treturn response(200, JSON.stringify({ data: 'ok' }));\n\t\t\tdefault:\n\t\t\t\treturn response(404, JSON.stringify({ data: 'Not Found' }));\n\t\t}\n\t}\n\tcatch (e) {\n\t\tconsole.log('Catch an error: ', e)\n\t}\n\n\treturn {\n\t\tstatusCode: 500,\n\t\theaders,\n\t\tbody: JSON.stringify({ type: 'exception', message: 'Service Error' }),\n\t};\n}\n\n\n", "import { PutItemCommand } from \"@aws-sdk/client-dynamodb\";\n\nconst storeSPInfo = async (payload, dynamodbISP) => {\n\n    const params = {\n        Item: {\n            id: {\n                S: '#SAML#' + payload.id,\n            },\n            name: {\n                S: payload.name,\n            },\n            logoUrl: {\n                S: payload.logoUrl ? payload.logoUrl : '',\n            },\n            serviceUrl: {\n                S: payload.serviceUrl,\n            },\n            released: {\n                BOOL: payload.released ? true : false,\n            }\n        },\n        ReturnConsumedCapacity: 'TOTAL',\n        TableName: process.env.AMFA_SPINFO_TABLE,\n    };\n\n    console.log('storeSPInfo Input:', params);\n\n    const data = await dynamodbISP.send(new PutItemCommand(params));\n\n    console.log('put saml sp storeSPInfo Output:', data);\n\n    return payload;\n}\n\nexport const putResData = async (payload, dynamodb) => {\n\n    console.log('samls putResData Input:', payload);\n\n    return await storeSPInfo(payload, dynamodb);\n}\n\nexport default putResData;", "//AWS configurations\nimport {\n    DeleteItemCommand,\n} from '@aws-sdk/client-dynamodb';\n\n\nexport const deleteResData = async (endcodedId, samlurl, cognitoToken, reloadUrl, dynamodb) => {\n\n    if (endcodedId) {\n\n        // const clientId = await getUserPoolClientId(cognitoISP);\n        const entityId = atob(endcodedId);\n\n        // if (clientId) {\n        const response = await fetch(`${samlurl}/${endcodedId}`, {\n            method: \"DELETE\", // *GET, POST, PUT, DELETE, etc.\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": cognitoToken,\n            },\n            body: JSON.stringify({\n                clientId: process.env.SAML_CLIENTID,\n                entityId,\n            }), // body data type must match \"Content-Type\" header\n        });\n\n        console.log('saml sp delete result', response);\n\n        const res = await fetch(reloadUrl, {\n            method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": cognitoToken,\n            },\n        });\n        const resTxt = await res.text();\n        console.log('samlproxy reload result', res);\n        console.log('samlproxy reload result text', resTxt);\n\n        try {\n            await dynamodb.send(new DeleteItemCommand({\n                TableName: process.env.AMFA_SPINFO_TABLE,\n                Key: {\n                    id: { S: '#SAML#' + endcodedId },\n                },\n            }));\n        } catch (err) {\n            console.log('Error deleting SAML SPINFO item from dynamodb', err);\n        }\n\n        return response.json();\n\n    };\n}\n\nexport default deleteResData;", "import { GetItemCommand } from '@aws-sdk/client-dynamodb';\n\n\nexport const getResData = async (encodedId, samlurl, dynamodb, cognitoToken) => {\n\n    if (encodedId) {\n\n        const entityId = atob(encodedId);\n\n        console.log('Getting from ', `${samlurl}/${encodedId}`)\n\n        const id = btoa(entityId + '_' + process.env.SAML_CLIENTID);\n        const response = await fetch(`${samlurl}/${id}`, {\n            method: \"GET\",\n            cache: \"no-cache\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": cognitoToken,\n            },\n        });\n\n        if (response.status !== 200) {\n            throw new Error(`Error: ${response.status}`);\n        }\n\n        const resData = await response.json();\n\n        console.log('fetch samlproxy get resData', resData)\n\n        const params = {\n            TableName: process.env.AMFA_SPINFO_TABLE,\n            Key: {\n                id: { S: `#SAML#${encodedId}` },\n            },\n        };\n\n        let spInfo = null;\n\n        try {\n            const spInfoRes = await dynamodb.send(new GetItemCommand(params));\n\n            console.log('get spInfo from dynamodb Res', spInfoRes)\n\n            if (spInfoRes?.Item?.id) {\n                spInfo = {\n                    logoUrl: spInfoRes?.Item?.logoUrl?.S,\n                    serviceUrl: spInfoRes?.Item?.serviceUrl?.S,\n                    released: spInfoRes?.Item?.released?.BOOL ? true: false,\n                }\n            }\n        }\n        catch (e) {\n            console.log('samlslist get spInfo from dynamodb error', e)\n        }\n\n        return {\n            id: encodedId,\n            name: resData.name,\n            metadataUrl: resData.metadataUrl,\n            entityId,\n            serviceUrl: spInfo?.serviceUrl,\n            logoUrl: spInfo?.logoUrl,\n            released: spInfo?.released,\n        }\n    }\n\n    return {\n        id: encodedId\n    }\n\n};\n"],
  "mappings": "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",
  "names": ["samls_exports", "__export", "handler", "__toCommonJS", "import_client_dynamodb", "storeSPInfo", "payload", "dynamodbISP", "params", "data", "putResData", "dynamodb", "import_client_dynamodb", "deleteResData", "endcodedId", "samlurl", "cognitoToken", "reloadUrl", "dynamodb", "entityId", "response", "res", "resTxt", "err", "import_client_dynamodb", "getResData", "encodedId", "samlurl", "dynamodb", "cognitoToken", "entityId", "id", "response", "resData", "params", "spInfo", "spInfoRes", "e", "import_client_dynamodb", "dynamodb", "samlurl", "samlReloadUrl", "handler", "event", "headers", "response", "statusCode", "body", "cognitoToken", "getResult", "getResData", "payload", "putResult", "putResData", "deleteResult", "deleteResData", "e"]
}
