"use strict";var p=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var w=(e,t)=>{for(var o in t)p(e,o,{get:t[o],enumerable:!0})},N=(e,t,o,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of E(t))!I.call(e,s)&&s!==o&&p(e,s,{get:()=>t[s],enumerable:!(r=T(t,s))||r.enumerable});return e};var L=e=>N(p({},"__esModule",{value:!0}),e);var D={};w(D,{handler:()=>C});module.exports=L(D);var h=require("@aws-sdk/client-dynamodb"),R=async(e,t)=>{let o={Item:{id:{S:"#SAML#"+e.id},name:{S:e.name},logoUrl:{S:e.logoUrl?e.logoUrl:""},serviceUrl:{S:e.serviceUrl},released:{BOOL:!!e.released}},ReturnConsumedCapacity:"TOTAL",TableName:process.env.AMFA_SPINFO_TABLE};console.log("storeSPInfo Input:",o);let r=await t.send(new h.PutItemCommand(o));return console.log("put saml sp storeSPInfo Output:",r),e},f=async(e,t)=>(console.log("samls putResData Input:",e),await R(e,t));var g=require("@aws-sdk/client-dynamodb"),d=async(e,t,o,r,s)=>{if(e){let a=atob(e),n=await fetch(`${t}/${e}`,{method:"DELETE",cache:"no-cache",headers:{"Content-Type":"application/json",Authorization:o},body:JSON.stringify({clientId:process.env.SAML_CLIENTID,entityId:a})});console.log("saml sp delete result",n);let l=await fetch(r,{method:"GET",cache:"no-cache",headers:{"Content-Type":"application/json",Authorization:o}}),m=await l.text();console.log("samlproxy reload result",l),console.log("samlproxy reload result text",m);try{await s.send(new g.DeleteItemCommand({TableName:process.env.AMFA_SPINFO_TABLE,Key:{id:{S:"#SAML#"+e}}}))}catch(i){console.log("Error deleting SAML SPINFO item from dynamodb",i)}return n.json()}};var S=require("@aws-sdk/client-dynamodb"),A=async(e,t,o,r)=>{if(e){let s=atob(e);console.log("Getting from ",`${t}/${e}`);let a=btoa(s+"_"+process.env.SAML_CLIENTID),n=await fetch(`${t}/${a}`,{method:"GET",cache:"no-cache",headers:{"Content-Type":"application/json",Authorization:r}});if(n.status!==200)throw new Error(`Error: ${n.status}`);let l=await n.json();console.log("fetch samlproxy get resData",l);let m={TableName:process.env.AMFA_SPINFO_TABLE,Key:{id:{S:`#SAML#${e}`}}},i=null;try{let c=await o.send(new S.GetItemCommand(m));console.log("get spInfo from dynamodb Res",c),c?.Item?.id&&(i={logoUrl:c?.Item?.logoUrl?.S,serviceUrl:c?.Item?.serviceUrl?.S,released:!!c?.Item?.released?.BOOL})}catch(c){console.log("samlslist get spInfo from dynamodb error",c)}return{id:e,name:l.name,metadataUrl:l.metadataUrl,entityId:s,serviceUrl:i?.serviceUrl,logoUrl:i?.logoUrl,released:i?.released}}return{id:e}};var O=require("@aws-sdk/client-dynamodb"),u=new O.DynamoDBClient({region:process.env.AWS_REGION}),y=process.env.SAMLPROXY_API_URL,U=process.env.SAMLPROXY_RELOAD_URL,C=async e=>{console.info(`EVENT
`+JSON.stringify(e,null,2)),console.log("event.requestContext.http.method: ",e.requestContext.http.method);let t={"Access-Control-Allow-Headers":"Content-Type,Authorization,X-Api-Key,X-Requested-With","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"OPTIONS,GET,PUT,DELETE"},o=(s=200,a)=>(console.log("return with:",{statusCode:s,headers:t,body:a}),{statusCode:s,headers:t,body:a}),r=e.headers.authorization;try{switch(e.requestContext.http.method){case"GET":let s=await A(e.pathParameters?.id,y,u,r);return o(200,JSON.stringify({data:s}));case"PUT":let a=JSON.parse(e.body),n=await f(a.data,u);return o(200,JSON.stringify({data:n}));case"DELETE":let l=await d(e.pathParameters?.id,y,r,U,u);return o(200,JSON.stringify({data:l}));case"OPTIONS":return o(200,JSON.stringify({data:"ok"}));default:return o(404,JSON.stringify({data:"Not Found"}))}}catch(s){console.log("Catch an error: ",s)}return{statusCode:500,headers:t,body:JSON.stringify({type:"exception",message:"Service Error"})}};0&&(module.exports={handler});
//# sourceMappingURL=index.js.map
