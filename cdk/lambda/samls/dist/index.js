"use strict";var p=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var w=(e,t)=>{for(var o in t)p(e,o,{get:t[o],enumerable:!0})},N=(e,t,o,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of T(t))!I.call(e,r)&&r!==o&&p(e,r,{get:()=>t[r],enumerable:!(s=E(t,r))||s.enumerable});return e};var L=e=>N(p({},"__esModule",{value:!0}),e);var D={};w(D,{handler:()=>C});module.exports=L(D);var h=require("@aws-sdk/client-dynamodb"),R=async(e,t)=>{let o={Item:{id:{S:"#SAML#"+e.id},name:{S:e.name},logoUrl:{S:e.logoUrl?e.logoUrl:""},serviceUrl:{S:e.serviceUrl},released:{BOOL:!!e.released}},ReturnConsumedCapacity:"TOTAL",TableName:process.env.AMFA_SPINFO_TABLE};console.log("storeSPInfo Input:",o);let s=await t.send(new h.PutItemCommand(o));return console.log("put saml sp storeSPInfo Output:",s),e},f=async(e,t)=>(console.log("samls putResData Input:",e),await R(e,t));var d=require("@aws-sdk/client-dynamodb"),g=async(e,t,o,s,r)=>{if(e){let i=atob(e),a=await fetch(`${t}/${e}`,{method:"DELETE",cache:"no-cache",headers:{"Content-Type":"application/json",Authorization:o},body:JSON.stringify({clientId:process.env.SAML_CLIENTID,entityId:i})});console.log("saml sp delete result",a);let l=await fetch(s,{method:"GET",cache:"no-cache",headers:{"Content-Type":"application/json",Authorization:o}}),m=await l.text();console.log("samlproxy reload result",l),console.log("samlproxy reload result text",m);try{await r.send(new d.DeleteItemCommand({TableName:process.env.AMFA_SPINFO_TABLE,Key:{id:{S:"#SAML#"+e}}}))}catch(c){console.log("Error deleting SAML SPINFO item from dynamodb",c)}return a.json()}};var S=require("@aws-sdk/client-dynamodb"),A=async(e,t,o,s)=>{if(e){let r=atob(e);console.log("Getting from ",`${t}/${e}`);let i=btoa(r+"_"+process.env.SAML_CLIENTID),a=await fetch(`${t}/${i}`,{method:"GET",cache:"no-cache",headers:{"Content-Type":"application/json",Authorization:s}});if(a.status!==200)throw new Error(`Error: ${a.status}`);let l=await a.json();console.log("fetch samlproxy get resData",l);let m={TableName:process.env.AMFA_SPINFO_TABLE,Key:{id:{S:`#SAML#${e}`}}},c=null;try{let n=await o.send(new S.GetItemCommand(m));console.log("get spInfo from dynamodb Res",n),n?.Item?.id&&(c={logoUrl:n?.Item?.logoUrl?.S,serviceUrl:n?.Item?.serviceUrl?.S,released:!!n?.Item?.released?.BOOL})}catch(n){console.log("samlslist get spInfo from dynamodb error",n)}return{id:e,name:l.name,metadataUrl:l.metadataUrl,entityId:r,serviceUrl:c?.serviceUrl,logoUrl:c?.logoUrl,released:c?.released}}return{id:e}};var O=require("@aws-sdk/client-dynamodb"),u=new O.DynamoDBClient({region:process.env.AWS_REGION}),y=process.env.SAMLPROXY_API_URL,U=process.env.SAMLPROXY_RELOAD_URL,C=async e=>{console.info(`EVENT
`+JSON.stringify(e,null,2)),console.log("event.requestContext.http.method: ",e.requestContext.http.method);let t={"Access-Control-Allow-Headers":"Content-Type,Authorization,X-Api-Key,X-Requested-With","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"OPTIONS,GET,PUT,DELETE"},o=(s=200,r)=>(console.log("return with:",{statusCode:s,headers:t,body:r}),{statusCode:s,headers:t,body:r});try{switch(e.requestContext.http.method){case"GET":let s=await A(e.pathParameters?.id,y,u);return o(200,JSON.stringify({data:s}));case"PUT":let r=JSON.parse(e.body),i=await f(r.data,u);return o(200,JSON.stringify({data:i}));case"DELETE":let a=await g(e.pathParameters?.id,y,e.headers.authorization,U,u);return o(200,JSON.stringify({data:a}));case"OPTIONS":return o(200,JSON.stringify({data:"ok"}));default:return o(404,JSON.stringify({data:"Not Found"}))}}catch(s){console.log("Catch an error: ",s)}return{statusCode:500,headers:t,body:JSON.stringify({type:"exception",message:"Service Error"})}};0&&(module.exports={handler});
//# sourceMappingURL=index.js.map
