{
  "version": 3,
  "sources": ["../get.mjs"],
  "sourcesContent": ["import { GetItemCommand } from '@aws-sdk/client-dynamodb';\n\n\nexport const getResData = async (encodedId, samlurl, dynamodb, cognitoToken) => {\n\n    if (encodedId) {\n\n        const entityId = atob(encodedId);\n\n        console.log('Getting from ', `${samlurl}/${encodedId}`)\n\n        const id = btoa(entityId + '_' + process.env.SAML_CLIENTID);\n        const response = await fetch(`${samlurl}/${id}`, {\n            method: \"GET\",\n            cache: \"no-cache\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": cognitoToken,\n            },\n        });\n\n        if (response.status !== 200) {\n            throw new Error(`Error: ${response.status}`);\n        }\n\n        const resData = await response.json();\n\n        console.log('fetch samlproxy get resData', resData)\n\n        const params = {\n            TableName: process.env.AMFA_SPINFO_TABLE,\n            Key: {\n                id: { S: `#SAML#${encodedId}` },\n            },\n        };\n\n        let spInfo = null;\n\n        try {\n            const spInfoRes = await dynamodb.send(new GetItemCommand(params));\n\n            console.log('get spInfo from dynamodb Res', spInfoRes)\n\n            if (spInfoRes?.Item?.id) {\n                spInfo = {\n                    logoUrl: spInfoRes?.Item?.logoUrl?.S,\n                    serviceUrl: spInfoRes?.Item?.serviceUrl?.S,\n                    released: spInfoRes?.Item?.released?.BOOL ? true: false,\n                }\n            }\n        }\n        catch (e) {\n            console.log('samlslist get spInfo from dynamodb error', e)\n        }\n\n        return {\n            id: encodedId,\n            name: resData.name,\n            metadataUrl: resData.metadataUrl,\n            entityId,\n            serviceUrl: spInfo?.serviceUrl,\n            logoUrl: spInfo?.logoUrl,\n            released: spInfo?.released,\n        }\n    }\n\n    return {\n        id: encodedId\n    }\n\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA+B,oCAGlBF,EAAa,MAAOG,EAAWC,EAASC,EAAUC,IAAiB,CAE5E,GAAIH,EAAW,CAEX,IAAMI,EAAW,KAAKJ,CAAS,EAE/B,QAAQ,IAAI,gBAAiB,GAAGC,KAAWD,GAAW,EAEtD,IAAMK,EAAK,KAAKD,EAAW,IAAM,QAAQ,IAAI,aAAa,EACpDE,EAAW,MAAM,MAAM,GAAGL,KAAWI,IAAM,CAC7C,OAAQ,MACR,MAAO,WACP,QAAS,CACL,eAAgB,mBAChB,cAAiBF,CACrB,CACJ,CAAC,EAED,GAAIG,EAAS,SAAW,IACpB,MAAM,IAAI,MAAM,UAAUA,EAAS,QAAQ,EAG/C,IAAMC,EAAU,MAAMD,EAAS,KAAK,EAEpC,QAAQ,IAAI,8BAA+BC,CAAO,EAElD,IAAMC,EAAS,CACX,UAAW,QAAQ,IAAI,kBACvB,IAAK,CACD,GAAI,CAAE,EAAG,SAASR,GAAY,CAClC,CACJ,EAEIS,EAAS,KAEb,GAAI,CACA,IAAMC,EAAY,MAAMR,EAAS,KAAK,IAAI,iBAAeM,CAAM,CAAC,EAEhE,QAAQ,IAAI,+BAAgCE,CAAS,EAEjDA,GAAW,MAAM,KACjBD,EAAS,CACL,QAASC,GAAW,MAAM,SAAS,EACnC,WAAYA,GAAW,MAAM,YAAY,EACzC,SAAU,EAAAA,GAAW,MAAM,UAAU,IACzC,EAER,OACOC,EAAP,CACI,QAAQ,IAAI,2CAA4CA,CAAC,CAC7D,CAEA,MAAO,CACH,GAAIX,EACJ,KAAMO,EAAQ,KACd,YAAaA,EAAQ,YACrB,SAAAH,EACA,WAAYK,GAAQ,WACpB,QAASA,GAAQ,QACjB,SAAUA,GAAQ,QACtB,EAGJ,MAAO,CACH,GAAIT,CACR,CAEJ",
  "names": ["get_exports", "__export", "getResData", "__toCommonJS", "import_client_dynamodb", "encodedId", "samlurl", "dynamodb", "cognitoToken", "entityId", "id", "response", "resData", "params", "spInfo", "spInfoRes", "e"]
}
