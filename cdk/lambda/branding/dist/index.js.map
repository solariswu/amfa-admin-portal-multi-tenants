{
  "version": 3,
  "sources": ["../index.mjs", "../../appclients/put.mjs"],
  "sourcesContent": ["\nimport { S3Client } from '@aws-sdk/client-s3'\nimport putResData from '../appclients/put.mjs';\nimport { GetObjectCommand } from '@aws-sdk/client-s3';\nimport { PutObjectCommand } from '@aws-sdk/client-s3';\nconst s3ISP = new S3Client({ region: process.env.AWS_REGION });\n\nexport const handler = async (event) => {\n\n    console.info(\"EVENT\\n\" + JSON.stringify(event, null, 2))\n    console.log('event.requestContext.http.method: ', event.requestContext.http.method);\n\n    const headers = {\n        'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Api-Key,X-Requested-With',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'OPTIONS,GET,PUT',\n    };\n\n    const response = (statusCode = 200, body) => {\n        console.log('return with:', {\n            statusCode,\n            headers,\n            body,\n        });\n        return {\n            statusCode,\n            headers,\n            body,\n        };\n    };\n\n    const cognitoToken = event.headers.authorization;\n\n    const getResData = async (type, s3) => {\n        const params = {\n            Bucket: type === 'spportal' ? process.env.SPPORTAL_BUCKETNAME : process.env.ADMINPORTAL_BUCKETNAME,\n            Key: 'branding.json',\n        };\n        const data = await s3.send(new GetObjectCommand(params));\n        const body = await data.Body.transformToString();\n\n        return JSON.parse(body);\n    }\n\n    const putResData = async (data, s3) => {\n        const params = {\n            Bucket: data.type === 'spportal' ? process.env.SPPORTAL_BUCKETNAME : process.env.ADMINPORTAL_BUCKETNAME,\n            Key: 'branding.json',\n            Body: JSON.stringify(data),\n        };\n        await s3.send(new PutObjectCommand(params));\n        return data;\n    }\n\n    try {\n        switch (event.requestContext.http.method) {\n            case 'GET':\n                const getResult = await getResData(event.pathParameters?.id, s3ISP);\n                return response(200, JSON.stringify({ data: getResult }));\n            case 'PUT':\n\t\t\t\tconst payload = JSON.parse(event.body);\n\t\t\t\tconst putResult = await putResData(payload.data);\n\t\t\t\treturn response(200, JSON.stringify({ data: putResult }));\n            case 'OPTIONS':\n                return response(200, JSON.stringify({ data: 'ok' }));\n            default:\n                return response(404, JSON.stringify({ data: 'Not Found' }));\n        }\n    }\n    catch (e) {\n        console.log('Catch an error: ', e)\n    }\n\n    return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ type: 'exception', message: 'Service Error' }),\n    };\n}\n\n\n", "import {\n    UpdateUserPoolClientCommand,\n    DescribeUserPoolClientCommand,\n    DescribeUserPoolCommand,\n} from \"@aws-sdk/client-cognito-identity-provider\";\n\nimport { PutItemCommand } from \"@aws-sdk/client-dynamodb\";\n\nconst storeSPInfo = async (clientId, serviceProviders, serviceLogoUrl, dynamodbISP) => {\n\n    const params = {\n        Item: {\n            id: {\n                S: '#OIDC#' + clientId,\n            },\n            name: {\n                S: '',\n            },\n            logoUrl: {\n                S: serviceLogoUrl ? serviceLogoUrl : '',\n            },\n            serviceUrl: {\n                S: JSON.stringify(serviceProviders),\n            },\n        },\n        ReturnConsumedCapacity: 'TOTAL',\n        TableName: process.env.AMFA_SPINFO_TABLE,\n    };\n\n    console.log('storeSPInfo Input:', params);\n\n    const data = await dynamodbISP.send(new PutItemCommand(params));\n\n    console.log('put oidc sp storeSPInfo Output:', data);\n\n    return serviceProviders;\n}\n\nexport const putResData = async (data, cognitoISP, dynamodb) => {\n    console.log('putResData Input:', data);\n\n    const {\n        id, clientName, serviceLogoUrl,\n        refreshTokenValidityDays, refreshTokenValidityMins,\n        accessTokenValidityDays, accessTokenValidityMins,\n        idTokenValidityDays, idTokenValidityMins,\n        serviceProviders\n    } = data;\n\n    let params = {\n        ClientId: id,\n        UserPoolId: process.env.USERPOOL_ID,\n    };\n\n    const describeRes = await cognitoISP.send(new DescribeUserPoolClientCommand(params));\n    let item = describeRes.UserPoolClient;\n\n    item.CallbackURLs = [];\n    item.ClientName = clientName;\n    item.SupportedIdentityProviders = ['apersona'];\n    item.LogoutURLs = [];\n    serviceProviders.forEach(sp => {\n        if (sp.splogoutcallback) {\n            item.LogoutURLs.push(sp.splogoutcallback);\n        }\n        if (sp.spcallback) {\n            item.CallbackURLs.push(sp.spcallback);\n        }\n    })\n    item.DefaultRedirectURI = item.CallbackURLs[0];\n\n    if (refreshTokenValidityDays || refreshTokenValidityMins) {\n        item.RefreshTokenValidity = parseInt(refreshTokenValidityDays) * 24 * 60 + parseInt(refreshTokenValidityMins);\n        item.TokenValidityUnits.RefreshToken = 'minutes';\n    }\n    if (accessTokenValidityDays || accessTokenValidityMins) {\n        item.AccessTokenValidity = parseInt(accessTokenValidityDays) * 24 * 60 + parseInt(accessTokenValidityMins);\n        item.TokenValidityUnits.AccessToken = 'minutes';\n    }\n    if (idTokenValidityDays || idTokenValidityMins) {\n        item.IdTokenValidity = parseInt(idTokenValidityDays) * 24 * 60 + parseInt(idTokenValidityMins);\n        item.TokenValidityUnits.IdToken = 'minutes';\n    }\n\n    delete item.ClientSecret;\n\n    params = {\n        UserPoolId: process.env.USERPOOL_ID,\n        ...item,\n    }\n\n    const resData = await cognitoISP.send(new UpdateUserPoolClientCommand(params));\n    item = resData.UserPoolClient;\n\n    if (item) {\n        const issuer = `https://cognito-idp.${process.env.AWS_REGION}.amazonaws.com/${item.UserPoolId}`;\n        const describeUserpoolRes = await cognitoISP.send(new DescribeUserPoolCommand({ UserPoolId: item.UserPoolId }));\n        const hostedUIBaseUrl = `https://${describeUserpoolRes.UserPool.Domain}.auth.${process.env.AWS_REGION}.amazoncognito.com`;\n\n        if (item.TokenValidityUnits.RefreshToken && item.TokenValidityUnits.RefreshToken !== 'minutes') {\n            switch (item.TokenValidityUnits.RefreshToken) {\n                case 'hours':\n                    item.RefreshTokenValidity *= 60;\n                    break;\n                case 'days':\n                    item.RefreshTokenValidity *= 24 * 60;\n                    break;\n                default:\n                    break;\n            }\n        }\n        else if (!item.TokenValidityUnits.RefreshToken) {\n            item.RefreshTokenValidity *= 24 * 60;\n        }\n\n        if (!item.AccessTokenValidity) {\n            item.AccessTokenValidity = 60;\n        }\n\n        if (item.TokenValidityUnits.AccessToken && item.TokenValidityUnits.AccessToken !== 'minutes') {\n            switch (item.TokenValidityUnits.AccessToken) {\n                case 'hours':\n                    item.AccessTokenValidity *= 60;\n                    break;\n                case 'days':\n                    item.AccessTokenValidity *= 24 * 60;\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (!item.IdTokenValidity) {\n            item.IdTokenValidity = 60;\n        }\n\n        if (item.TokenValidityUnits.IdToken && item.TokenValidityUnits.IdToken !== 'minutes') {\n            switch (item.TokenValidityUnits.IdToken) {\n                case 'hours':\n                    item.IdTokenValidity *= 60;\n                    break;\n                case 'days':\n                    item.IdTokenValidity *= 24 * 60;\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        await storeSPInfo(item.ClientId, serviceProviders, serviceLogoUrl, dynamodb);\n\n        return {\n            id: item.ClientId,\n            clientName: item.ClientName,\n            clientSecret: item.ClientSecret,\n            userPoolId: item.UserPoolId,\n            issuer,\n            OIDCMetadataUrl: `${issuer}/.well-known/openid-configuration`,\n            jwksUri: `${issuer}/.well-known/jwks.json`,\n            authorizationEndpoint: `${hostedUIBaseUrl}/oauth2/authorize`,\n            tokenEndpoint: `${hostedUIBaseUrl}/oauth2/token`,\n            userInfoEndpoint: `${hostedUIBaseUrl}/oauth2/userinfo`,\n            revokeEndpoint: `${hostedUIBaseUrl}/oauth2/revoke`,\n            endSessionEndpoint: `${hostedUIBaseUrl}/logout`,\n            supportedScopes: item.AllowedOAuthScopes?.toString().replaceAll(',', ' '),\n            // callbackURLs: item.CallbackURLs ? item.CallbackURLs.map(url => ({ url })) : [],\n            defaultRedirectURI: item.DefaultRedirectURI,\n            // logoutURLs: item.LogoutURLs ? item.LogoutURLs.map(url => ({ url })) : [],\n            creationDate: item.CreationDate,\n            lastModifiedDate: item.LastModifiedDate,\n            refreshTokenValidityDays: item.RefreshTokenValidity >= 24 * 60 ? (item.RefreshTokenValidity - item.RefreshTokenValidity % (24 * 60)) / (24 * 60) : 0,\n            refreshTokenValidityMins: item.RefreshTokenValidity >= 24 * 60 ? item.RefreshTokenValidity % (24 * 60) : item.RefreshTokenValidity,\n            idTokenValidityDays: item.IdTokenValidity >= 24 * 60 ? 1 : 0,\n            idTokenValidityMins: item.IdTokenValidity >= 24 * 60 ? 0 : item.IdTokenValidity,\n            accessTokenValidityDays: item.AccessTokenValidity >= 24 * 60 ? 1 : 0,\n            accessTokenValidityMins: item.AccessTokenValidity >= 24 * 60 ? 0 : item.AccessTokenValidity,\n            serviceProviders,\n            serviceLogoUrl,\n        }\n    }\n\n    return null;\n}\n\nexport default putResData;"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAAyB,8BCDzB,IAAAC,EAIO,qDAEPC,EAA+B,oCDH/B,IAAAC,EAAiC,8BACjCA,EAAiC,8BAC3BC,EAAQ,IAAI,WAAS,CAAE,OAAQ,QAAQ,IAAI,UAAW,CAAC,EAEhDC,EAAU,MAAOC,GAAU,CAEpC,QAAQ,KAAK;AAAA,EAAY,KAAK,UAAUA,EAAO,KAAM,CAAC,CAAC,EACvD,QAAQ,IAAI,qCAAsCA,EAAM,eAAe,KAAK,MAAM,EAElF,IAAMC,EAAU,CACZ,+BAAgC,wDAChC,8BAA+B,IAC/B,+BAAgC,iBACpC,EAEMC,EAAW,CAACC,EAAa,IAAKC,KAChC,QAAQ,IAAI,eAAgB,CACxB,WAAAD,EACA,QAAAF,EACA,KAAAG,CACJ,CAAC,EACM,CACH,WAAAD,EACA,QAAAF,EACA,KAAAG,CACJ,GAGEC,EAAeL,EAAM,QAAQ,cAE7BM,EAAa,MAAOC,EAAMC,IAAO,CACnC,IAAMC,EAAS,CACX,OAAQF,IAAS,WAAa,QAAQ,IAAI,oBAAsB,QAAQ,IAAI,uBAC5E,IAAK,eACT,EAEMH,EAAO,MADA,MAAMI,EAAG,KAAK,IAAI,mBAAiBC,CAAM,CAAC,GAC/B,KAAK,kBAAkB,EAE/C,OAAO,KAAK,MAAML,CAAI,CAC1B,EAEMM,EAAa,MAAOC,EAAMH,IAAO,CACnC,IAAMC,EAAS,CACX,OAAQE,EAAK,OAAS,WAAa,QAAQ,IAAI,oBAAsB,QAAQ,IAAI,uBACjF,IAAK,gBACL,KAAM,KAAK,UAAUA,CAAI,CAC7B,EACA,aAAMH,EAAG,KAAK,IAAI,mBAAiBC,CAAM,CAAC,EACnCE,CACX,EAEA,GAAI,CACA,OAAQX,EAAM,eAAe,KAAK,OAAQ,CACtC,IAAK,MACD,IAAMY,EAAY,MAAMN,EAAWN,EAAM,gBAAgB,GAAIF,CAAK,EAClE,OAAOI,EAAS,IAAK,KAAK,UAAU,CAAE,KAAMU,CAAU,CAAC,CAAC,EAC5D,IAAK,MACb,IAAMC,EAAU,KAAK,MAAMb,EAAM,IAAI,EAC/Bc,EAAY,MAAMJ,EAAWG,EAAQ,IAAI,EAC/C,OAAOX,EAAS,IAAK,KAAK,UAAU,CAAE,KAAMY,CAAU,CAAC,CAAC,EAChD,IAAK,UACD,OAAOZ,EAAS,IAAK,KAAK,UAAU,CAAE,KAAM,IAAK,CAAC,CAAC,EACvD,QACI,OAAOA,EAAS,IAAK,KAAK,UAAU,CAAE,KAAM,WAAY,CAAC,CAAC,CAClE,CACJ,OACOa,EAAG,CACN,QAAQ,IAAI,mBAAoBA,CAAC,CACrC,CAEA,MAAO,CACH,WAAY,IACZ,QAAAd,EACA,KAAM,KAAK,UAAU,CAAE,KAAM,YAAa,QAAS,eAAgB,CAAC,CACxE,CACJ",
  "names": ["index_exports", "__export", "handler", "__toCommonJS", "import_client_s3", "import_client_cognito_identity_provider", "import_client_dynamodb", "import_client_s3", "s3ISP", "handler", "event", "headers", "response", "statusCode", "body", "cognitoToken", "getResData", "type", "s3", "params", "putResData", "data", "getResult", "payload", "putResult", "e"]
}
